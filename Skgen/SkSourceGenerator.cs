using System.Collections.Immutable;
using System.Text;
using System.Text.Json;
using System.Text.Json.Nodes;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Skgen;

[Generator]
public class SkSourceGenerator : ISourceGenerator
{
    private record Parameter(string name, string description);

    private record Input(IList<Parameter> parameters);

    private record Config(Input input);

    private record PluginFunction(Config config, string pluginName, string functionName);
    
    public void Execute(GeneratorExecutionContext context)
    {
        // Find the main method
        var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);
        
        var pluginConfigFiles = context.AdditionalFiles
            .Where(s => s.Path.EndsWith("config.json")).ToImmutableList();
        
        var methods = 
            pluginConfigFiles.Select(t => new {text = t.GetText().ToString(), PluginName = new DirectoryInfo(Path.GetDirectoryName(Path.GetDirectoryName(t.Path))).Name, FunctionName =  new DirectoryInfo(Path.GetDirectoryName(t.Path)).Name})
                .Select((text, plu) => new PluginFunction(JsonSerializer.Deserialize<Config>(text.text), text.PluginName, text.FunctionName))
                    .Select(i => $@"
    public static async Task<FunctionResult> {i.pluginName}(this Kernel kernel{(i.config.input.parameters.Count > 0 ? ", " : "") + string.Join(", ", i.config.input.parameters.Select(p => $"string {p.name}").ToImmutableList())}, CancellationToken cancellationToken = default(CancellationToken))
    {{
        var arguments = new KernelArguments();
        {string.Join("\n\t\t", i.config.input.parameters.Select(p => $"arguments[\"{p.name}\"] = {p.name};\n"))}
    
        var answer = await kernel.InvokeAsync(""{i.pluginName}"", ""{i.functionName}"", arguments, cancellationToken);
        return answer;
    }}").ToImmutableList();
        
        string source = $@"// <auto-generated/>
using System;
using Microsoft.SemanticKernel;

namespace Skgen;

public static partial class KernelExtensionMethods
{{
    {methods[0]}
}}
";
        
        // Add the source code to the compilation
        context.AddSource($"SkSourceGeneratorKernelExtensionMethods.g.cs", source);
    }

    public void Initialize(GeneratorInitializationContext context)
    {
        // No initialization required for this one
        Console.WriteLine(context);
        
    }
}
